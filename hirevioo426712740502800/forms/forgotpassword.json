{
    "className": "org.joget.apps.form.model.Form",
    "elements": [{
        "className": "org.joget.apps.form.model.Section",
        "elements": [
            {
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.CustomHTML",
                        "properties": {
                            "autoPopulate": "",
                            "id": "field1",
                            "label": "",
                            "value": "<style>\r\n.navbar-hirevioo,.form-section-title{\r\n    display:none !important;\r\n}\r\n\r\n#section-actions{\r\n    display:none !important;\r\n}\r\n\r\n#section1{\r\n    background-color: white !important;\r\n    height:100vh;\r\n}\r\n\r\n#backHome{\r\n    width: auto;\r\n    background-color: #614ac1;\r\n    border-radius: 4px;\r\n    color: white;\r\n    margin-bottom: 15px;\r\n    border: 1px solid #614ac1;\r\n}\r\n\r\n#mainDiv {\r\n    /*margin: 0;*/\r\n    /*margin-top: 34%;*/\r\n    /*left: 25%;*/\r\n    position: relative;\r\n}\r\n\r\n#divImgForgotPassword img {\r\n    height: 560px;\r\n    /*margin-top: 12%;*/\r\n    /*left: 18%;*/\r\n    position: relative;\r\n}\r\n\r\n#secondDiv{\r\n    margin-top: 40px !important;\r\n    margin-bottom: 40px !important;\r\n}\r\nh1{\r\n    font-size:34px !important;\r\n}\r\nh4{\r\n    font-size:24px !important;\r\n    color:#7C8493 !important ;\r\n}\r\n.form-error-message{\r\n    display:block !important;\r\n    width: max-content;\r\n    /*background-color: red;*/\r\n    color: red;\r\n    text-align: center;\r\n    border-radius: 3px;\r\n    font-weight: bold !important;\r\n    height: 15px;\r\n    padding-top: 2px;\r\n}\r\n\r\n#forgotpassword div#section1 {\r\n    display: flex;\r\n    justify-content: space-around !important;\r\n    align-items: center;\r\n}\r\n\r\n#forgotpassword div#section1 .form-column {\r\n    margin-left: 10%;\r\n    margin-right: 10%;\r\n}\r\n\r\n\r\n#forgotpassword div#section1 .form-column:nth-child(3) {\r\n    text-align: center;\r\n}\r\n\r\n\r\ndiv#Backbtn a {\r\n    font-size: 16px !important;\r\n    color: #614ac1;\r\n}\r\n\r\ndiv#Backbtn i {\r\n    font-size: 11px;\r\n    color: #614ac1;\r\n    margin-right: 5px;\r\n}\r\n\r\nh1.clashDisplay.template-color {\r\n    margin-top: 20px;\r\n}\r\n\r\n<\/style>\r\n\r\n<div id=\"Backbtn\">\r\n    <i class=\"fa fa-chevron-left\" aria-hidden=\"true\"><\/i>\r\n    <a href=\"landing_page\">Back<\/a>\r\n<\/div>\r\n\r\n\r\n<div id=\"mainDiv\">\r\n    <h1 class=\"clashDisplay template-color\">Reset account password<\/h1>\r\n    <div id=\"secondDiv\" class=\"color-gray-2 epilogue-medium pb-4 mt-4 mb-4\">\r\n        <h4>Please enter the email address for your account.<\/h4>\r\n        <h4>A verification code will be sent to you.<\/h4>\r\n    <\/div>\r\n<\/div>\r\n\r\n\r\n<script>\r\n    function redirection(){\r\n        window.location.href = \"landing_page\";\r\n    }\r\n<\/script>\r\n"
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "id": "email",
                            "label": "Email",
                            "maxlength": "",
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.BeanShellValidator",
                                "properties": {
                                    "decoration": "",
                                    "script": "import org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.commons.util.LogUtil;\r\nimport org.joget.directory.model.service.DirectoryManager;\r\nimport org.joget.directory.model.User;\r\nimport org.joget.commons.util.StringUtil;\r\nimport org.joget.apps.form.model.Form;\r\nimport java.util.regex.*;\r\n\r\n\r\npublic boolean validate(Element element,FormData formData,String [] values) {\r\n    \r\n \r\n        String regex = \"^[a-zA-Z0-9_-]+(?:\\\\.[a-zA-Z0-9_-]+)*@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$\";\r\n        Pattern p = Pattern.compile(regex);\r\n        Matcher m = p.matcher(values[0]);\r\n\r\n    if (m.matches()) {\r\n        DirectoryManager dm = (DirectoryManager) AppUtil.getApplicationContext().getBean(\"directoryManager\");\r\n        try {\r\n            //get user by Email (username=email)\r\n            User user = dm.getUserByUsername(values[0]);\r\n            if(user!=null){\r\n                return true; \r\n            }\r\n            else{\r\n                String id = FormUtil.getElementParameterName(element);\r\n                formData.addFormError(id, \"Email does not exist\");\r\n                System.out.println(\"Email does not exist\");\r\n                return false;  \r\n            }\r\n        } catch(Exception e) {\r\n            LogUtil.error(\"HV app - Form Sign in\", e, \"Error validating user email in sign in\");\r\n        } \r\n    }else{\r\n        String id = FormUtil.getElementParameterName(element);\r\n        formData.addFormError(id, \"Invalid email format\");\r\n        return false;\r\n    }\r\n  \r\n    \r\n}\r\n   \r\n//call\r\nreturn validate(element,formData,values);"
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.CustomHTML",
                        "properties": {
                            "autoPopulate": "",
                            "id": "field4",
                            "label": "",
                            "value": "<style>\r\n.navbar-hirevioo,.form-section-title{\r\n    display:none !important;\r\n}\r\n\r\n#section-actions{\r\n    display:none !important;\r\n}\r\n\r\n#section1{\r\n    background-color: white !important;\r\n    height:100vh;\r\n}\r\n\r\n#reset{\r\n    width: auto;\r\n    background-color: #614ac1 !important;\r\n    border-radius: 16px;\r\n    border: 1px solid #614ac1 !important;\r\n    color: white;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n#Divbtn {\r\n    margin-top: 15px;\r\n    position: relative;\r\n}\r\n\r\n\r\n<\/style>\r\n\r\n<div id=\"Divbtn\">\r\n    <button type=\"button\" id=\"reset\" class=\"menu-block login-btn rounded-4 text-decoraiotn-none\" onclick=\"document.getElementById('submit').click();\">Reset<\/button>\r\n<\/div>\r\n\r\n\r\n<script>\r\n    function redirection(){\r\n        window.location.href = \"landing_page\";\r\n    }\r\n<\/script>\r\n"
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.HiddenField",
                        "properties": {
                            "id": "reset_code",
                            "useDefaultWhenEmpty": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.HiddenField",
                        "properties": {
                            "id": "status",
                            "useDefaultWhenEmpty": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.HiddenField",
                        "properties": {
                            "id": "valid_until",
                            "useDefaultWhenEmpty": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {"width": "49%"}
            },
            {
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.apps.form.lib.CustomHTML",
                    "properties": {
                        "autoPopulate": "",
                        "id": "field2",
                        "label": "",
                        "value": "<div id=\"divImgForgotPassword\">\r\n    <img src=\"#appResource.verification.svg#\">\r\n<\/div>"
                    }
                }],
                "properties": {"width": "49%"}
            }
        ],
        "properties": {
            "comment": "",
            "id": "section1",
            "join": "",
            "label": "",
            "loadBinder": {
                "className": "",
                "properties": {}
            },
            "permission": {
                "className": "",
                "properties": {}
            },
            "permissionReadonly": "",
            "readonly": "",
            "readonlyLabel": "",
            "regex": "",
            "reverse": "",
            "storeBinder": {
                "className": "",
                "properties": {}
            },
            "visibilityControl": "",
            "visibilityValue": ""
        }
    }],
    "properties": {
        "description": "",
        "id": "forgotpassword",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Forgot Password",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.app.service.*;\r\nimport org.joget.apps.form.model.*;\r\nimport org.joget.apps.form.service.*;\r\nimport java.util.*;\r\nimport java.text.*;\r\nimport java.util.Set;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.commons.util.SecurityUtil;\r\nimport org.joget.directory.dao.UserDao;\r\nimport org.joget.directory.dao.RoleDao;\r\nimport org.joget.directory.model.User;\r\nimport org.joget.directory.model.service.DirectoryUtil;\r\nimport org.joget.directory.model.service.UserSecurity;\r\nimport org.joget.apps.workflow.security.WorkflowUserDetails;\r\nimport org.joget.directory.model.service.DirectoryManager;\r\nimport org.joget.workflow.model.service.WorkflowUserManager;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.joget.workflow.util.WorkflowUtil;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.springframework.security.web.savedrequest.HttpSessionRequestCache;\r\nimport org.springframework.security.web.savedrequest.SavedRequest;\r\nimport org.joget.commons.util.StringUtil;\r\nimport org.joget.commons.util.UuidGenerator;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport java.sql.Date;\r\n\r\nimport java.lang.Exception;\r\nimport org.joget.commons.util.LogUtil;\r\n\r\nimport java.util.Properties;\r\nimport javax.mail.Flags;\r\nimport javax.mail.Folder;\r\nimport javax.mail.Message;\r\nimport javax.mail.MessagingException;\r\nimport javax.mail.NoSuchProviderException;\r\nimport javax.mail.Session;\r\nimport javax.mail.Store;\r\nimport javax.mail.search.FlagTerm;\r\n\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.plugin.base.ApplicationPlugin;\r\nimport org.joget.plugin.base.Plugin;\r\nimport org.joget.plugin.base.PluginManager;\r\nimport org.joget.plugin.property.model.PropertyEditable;\r\nimport java.util.Collection;\r\nimport org.joget.apps.app.service.AppPluginUtil;\r\n\r\npublic int verifResetRequest(String email){\r\n    //Get Joget's current datasource configs\r\n    DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n    int result=0;\r\n    con = ds.getConnection();\r\n     \r\n    if (!con.isClosed()) {\r\n        //Get the URL parameter\r\n    \r\n        //Here you can query from one or multiple tables using JOIN etc\r\n        String sql = \"SELECT count(*) FROM jwdb.app_fd_forgotpassword where c_status like 'active' and c_email=?\";\r\n        PreparedStatement stmt = con.prepareStatement(sql);\r\n        stmt.setString(1, email);\r\n    \r\n        //Execute the SELECT SQL statement\r\n        ResultSet rs = stmt.executeQuery();\r\n             \r\n        //Get value from columns of record(s)\r\n        while (rs.next()) {\r\n            result=rs.getInt(1);\r\n        }\r\n    }\r\n    con.close();\r\n    return result;\r\n}\r\n\r\npublic void updateRequestToPostponed(String email){\r\n    //Get Joget's current datasource configs\r\n    DataSource ds = (DataSource) AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n    int result=0;\r\n    con = ds.getConnection();\r\n     \r\n    if (!con.isClosed()) {\r\n        //Get the URL parameter\r\n    \r\n        //Here you can query from one or multiple tables using JOIN etc\r\n        String sql = \"update jwdb.app_fd_forgotpassword set c_status='postponed' where c_status like 'active' and c_email=?\";\r\n        PreparedStatement stmt = con.prepareStatement(sql);\r\n        stmt.setString(1, email);\r\n    \r\n        ///Execute SQL statement\r\n        stmt.executeUpdate();\r\n    }\r\n  \r\n    con.close();\r\n}\r\n\r\n\r\npublic String resetCodeGeneration(){\r\n    int length=8;\r\n    String numbers = \"1234567890\";\r\n    Random random = new Random();\r\n    String code =\"\";\r\n        \r\n    for(int i = 0; i< length ; i++) {\r\n        code+= numbers.charAt(random.nextInt(numbers.length()));\r\n    }\r\n    return code;\r\n}\r\n\r\npublic void setResetPasswordRequest(String email,String resetCode){\r\n    Connection con = null;\r\n        try {\r\n            UuidGenerator uuid = UuidGenerator.getInstance();\r\n            String id = uuid.getUuid();\r\n            DateFormat dateFormat = new SimpleDateFormat(\"yyyy-M-dd hh:mm:ss\");\r\n            java.util.Date date = new java.util.Date();\r\n            Calendar cal = Calendar.getInstance();\r\n            cal.setTime(date);\r\n            cal.add(Calendar.MINUTE, 30);\r\n            String dateCreated=dateFormat.format(date);\r\n            String dateValid=dateFormat.format(cal.getTime());\r\n            // retrieve connection from the default datasource\r\n            DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n            con = ds.getConnection();\r\n            // execute SQL query\r\n            if(!con.isClosed()) {\r\n                PreparedStatement stmt = con.prepareStatement(\"insert into app_fd_forgotpassword(id,dateCreated,c_email,c_reset_code,c_valid_until,c_status) values (?,?,?,?,?,?);\");\r\n                stmt.setString (1, id);\r\n                stmt.setString (2,dateCreated);\r\n                stmt.setString (3, email);\r\n                stmt.setString (4, resetCode);\r\n                stmt.setString (5, dateValid);\r\n                stmt.setString (6, \"active\");\r\n                                \r\n                stmt.execute();\r\n                con.close();\r\n            }\r\n        } catch(Exception e) {\r\n            LogUtil.error(\"Sample app - Form 1\", e, \"Error loading user data in load binder\");\r\n        }\r\n}\r\n\r\npublic void sendEmail(String usermail,String subject ,String body){\r\n    AppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n    PluginManager pluginManager = (PluginManager) AppUtil.getApplicationContext().getBean(\"pluginManager\");\r\n    //Reuse Email Tool to send separated email to a list of users;\r\n    Plugin plugin = pluginManager.getPlugin(\"org.joget.apps.app.lib.EmailTool\");\r\n        \r\n    //Get default properties (SMTP setting) for email tool\r\n    Map propertiesMap = AppPluginUtil.getDefaultProperties(plugin, null, appDef, null);\r\n    propertiesMap.put(\"pluginManager\", pluginManager);\r\n    propertiesMap.put(\"appDef\", appDef);\r\n    //propertiesMap.put(\"request\", request);\r\n        \r\n    ApplicationPlugin emailTool = (ApplicationPlugin) plugin;\r\n        \r\n    \r\n    propertiesMap.put(\"toSpecific\", usermail);\r\n    propertiesMap.put(\"subject\", subject);\r\n    propertiesMap.put(\"message\", body);\r\n    //set properties and execute the tool\r\n\r\n    \r\n    ((PropertyEditable) emailTool).setProperties(propertiesMap);\r\n    emailTool.execute(propertiesMap);\r\n    System.out.println(\"----------------------------->mail sent\");   \r\n\r\n\r\n}\r\n  \r\n// email=rows.get(0).getProperty(\"email\");\r\n// int verifExistRequest=verifResetRequest(email);\r\n// if(verifExistRequest==0){\r\n//     String resetCode=resetCodeGeneration();\r\n//     setResetPasswordRequest(email,resetCode);\r\n//     String userSubject=\"Reset account password\";\r\n//     String userBody=\"Verification code: \"+resetCode;\r\n//     sendEmail(email,userSubject ,userBody);\r\n// }else{\r\n//     updateRequestToPostponed(email);\r\n//     String resetCode=resetCodeGeneration();\r\n//     setResetPasswordRequest(email,resetCode);\r\n//     String userSubject=\"Reset account password\";\r\n//     String userBody=\"Verification code: \"+resetCode;\r\n//     sendEmail(email,userSubject ,userBody);\r\n// }\r\n\r\n\r\npublic FormRowSet store(Element element, FormRowSet rows, FormData formData) {\r\n    //check the rows is not empty before store it\r\n    if (rows != null && !rows.isEmpty()) {\r\n        //Get the submitted data\r\n        FormRow row = rows.get(0);\r\n        \r\n        email=rows.get(0).getProperty(\"email\");\r\n        int verifExistRequest=verifResetRequest(email);\r\n        if(verifExistRequest!=0){\r\n            updateRequestToPostponed(email);\r\n        }\r\n        \r\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-M-dd hh:mm:ss\");\r\n        java.util.Date date = new java.util.Date();\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(date);\r\n        cal.add(Calendar.MINUTE, 30);\r\n        String dateValid=dateFormat.format(cal.getTime());\r\n        String resetCode=resetCodeGeneration();\r\n            \r\n        row.setProperty(\"reset_code\", resetCode);\r\n        row.setProperty(\"status\", \"active\");\r\n        row.setProperty(\"valid_until\", dateValid);\r\n        \r\n        String userSubject=\"Reset account password\";\r\n        String userBody=\"Verification code: \"+resetCode;\r\n        sendEmail(email,userSubject ,userBody);     \r\n\r\n        //Reuse Workflow Form Binder to store data\r\n        PluginManager pluginManager = (PluginManager) AppUtil.getApplicationContext().getBean(\"pluginManager\");\r\n        FormStoreBinder binder = (FormStoreBinder) pluginManager.getPlugin(\"org.joget.apps.form.lib.WorkflowFormBinder\");\r\n        binder.store(element, rows, formData);\r\n    }\r\n     \r\n    return rows;\r\n}\r\n \r\n//call store method with injected variable\r\nreturn store(element, rows, formData);\r\n"
            }
        },
        "tableName": "forgotpassword"
    }
}